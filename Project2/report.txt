Brendon Ng
304-925-492
UCLA CS 32 Lec 2 Dis 2E
Prof. Smallberg

Report - Programming Assignment 2: Double Trouble

1. My doubly-linked list implementation:
   Each Set contains its values in a linked list of Nodes. Each Node carries one of the
   values in the Set. The linked list is not circular nor does it have a dummy Node.
   Instead, each Set has a 'head' pointer that points to the first Node in the
   linked list, and a 'tail' pointer that points to the last Node.
   The Nodes are organized alphabetically to make it easier to access and find values.
   Each Node has a value, and a pointer to the next node and the previous node
	           ___________________
head: [1000] ----> | m_value = "a"    |  1000
                   |                  |
                   | m_next = 2423    |-------------
             ----->|                  |            |
             |     | m_prev = nullptr |            |
             |     ____________________            |
             |                                     |
             |     ____________________            |
             |     | m_value = "b"    |  2423  <---|
             |     |                  |            
             |     | m_next = 813     |-------------
             |     |                  |            |
             ------| m_prev = 1000    |            |
             ----->____________________            |
             |                                     |
             |     ____________________            |
             |     | m_value = "c"    |  813  <-----
             |     |                  |            
             |     | m_next = nullptr |
             |     |                  |            
             ------| m_prev = 2423    |           
tail: [813] -----> ____________________       


2. PSEUDOCODE 

bool Set::insert(const ItemType& value)
{
	if linked list has no elements, create new node at the head, set tail to that node

	if the value is before the first node alphabetically, add to front

	if the value already exists at the head node then return false

	if none of the above, iterate through to the node directly above where to insert
		
	Allocate new node
	connect new node in between current node and the next one by assigning next and
	prev pointers
	if we're at the end of the linked list, reassign tail to the new node
}

bool Set::erase(const ItemType& value)
{
	if the linked list is empty, return false

	if we wish to delete the first node, delete it and set new head pointer

	if none of the above, traverse to the node above the one we want to delete
	
	delete the node and reassign next and previous pointers of surrounding nodes
	if we're deleting the last node in the list, reassign tail
}

bool Set::contains(const ItemType& value) const
{
	Traverse through nodes until we find one that matches value
	if we find a match, return true
	
	if it makes it through the whole list without a match, return false
}

bool Set::get(int i, ItemType& value) const
{
	if i is outside the range of the linked list, return false
	
	else, traverse through i nodes and set value to the value of the i-th node
	return true
}

void Set::swap(Set& other)
{
	Create new Node pointers to temporarily store the addresses of head and tail of
	'other'

	Assign the current head, tail addresses and size to 'other'

	Assign the temporarily stored addresses and size to the current head, tail, m_size
}

void unite(const Set& s1, const Set& s2, Set& result)
{
	Erase all nodes that are left in 'result'

	Copy each value from 's1' into 'result' using insert(), it will ignore duplicates

	Copy each value from 's2' into 'result' using insert(), it will ignore duplicates
}

void subtract(const Set& s1, const Set& s2, Set& result)
{
	Copy contents of 's1' to 'result'
	
	For each element of 's2', attempt to erase it from 'result', leaving only values
	that are only in 's1' and not 's2'
}

Destructor:
Set::~Set()
{
	Iterate through each node
	temporarily store the address of next node
	delete current node
	traverse to next node
}

Copy Constructor:
Set::Set(const Set& src) 
{
	Initialize current Set to empty linked list
	Copy each Node in src to current Set using insert function
}

Assignment Operator
Set& Set::operator=(const Set &src)
{
	If it is trying to assign itself, do nothing and return *this

	Destruct all of the nodes currently in the linked list
	
	Initialize the set to an empty linked list

	Copy each Node in src to current Set using insert function
}


3. TEST CASES

The tests were performed on a set of strings

    Set s2;

    ItemType x1[17] = {"a","k","b","l","c","p","i","d",
			"o","e","j","f","g","m","h","n","0"};

// Test insert of many instances, beginning of the list, end of list, middle of list
    int i=0;			
    while(x1[i] != "0"){
        s2.insert(x1[i]);  
        i++;
    }
 
    assert(s2.size()==16);		// make sure everything was added
    assert(s2.insert("p") == false);	// test attempt to insert repeat value
    assert(s2.insert("l") == false);	// test attempt to insert repeat value
    assert(s2.insert("h") == false);	// test attempt to insert repeat value
    assert(s2.erase("z") == false);	// test attempt to erase non existent value
    assert(s2.size()==16);		// make sure the size has stayed the same
    assert(s2.insert("z") == true);	// test insert at the end of linked list
    assert(s2.size()==17);
    assert(s2.erase("c") == true);	// erase an element
    assert(s2.size() == 16);
    assert(s2.insert("kangaroo") == true);	// test regular insert
    assert(s2.contains("kangaroo") == true);	// test contains function
    ItemType v1;
    s2.get(10, v1);
    assert(v1=="kangaroo");			// test get function


    Set s3;
    s3.insert("bruin");	
    s3.insert("kangaroo");
    s3.insert("zebra");
    s3.insert("arangatang");
    s3.insert("dodo bird");
    s3.insert("asteroid");
    assert(s3.insert("") == true);	// test ability to insert empty string
    assert(s3.size()==7);
    assert(s3.contains("") == true);	// test ability to recognize contains empty string
    s3.erase("dodo bird");		// test erase
    assert(s3.contains("dodo bird") == false);	// make sure erase worked


    s3.swap(s2);			// Test swap function
    
    assert(s2.size()==6);		// test if sizes have switched
    assert(s3.size()==17);		
    assert(s2.contains("dodo bird") == false);  // Should no longer contain this
    s3.get(10, v1);			
    assert(v1=="kangaroo");		// test get function on swapped Set
    assert(s3.contains("kangaroo") == true);	// Make sure elements were swapped over


    Set numbers1;
    assert(numbers1.empty());		// Make sure new set is empty

    ItemType numbers[17] = {"1","8","4","7","1","9","0","0","9","2","3","6","5","\0"};
    
//Test insert function on regular insert, insert at beginning of the list, end of the
//list, middle of the list, attempt to insert repeat value at both beginning and end
    int j=0;
    while(numbers[j] != "\0"){
        numbers1.insert(numbers[j]);
        j++;
    }
    assert(numbers1.size() == 10);	// Test for correct size

//Create new set with a different number of values
    Set numbers2;
    ItemType numbersTens[17] = {"10","80","40","70","10",
					"90","90","20","30","60","50","\0"};
    j=0;
    while(numbersTens[j] != "\0"){
        numbers2.insert(numbersTens[j]);
        j++;
    }
    assert(numbers2.size() == 9);	// Test for correct size


//Test copy constructor
    Set numbers3 = numbers1;
    for(int i=0; i<10 ;i++){		// Loop through and make sure each element matches
        ItemType one;
        numbers1.get(i, one);
        ItemType two;
        numbers3.get(i, two);
        assert(one==two);
    }

    assert(numbers1.size() == numbers3.size());		// Sizes should match
    assert(numbers1.erase("0"));			// Test Erase head of list
    assert(numbers1.size() == 9);			// Size should decrease
    assert(numbers1.erase("9"));			// Test erase tail of list
    assert(numbers1.size() == 8);			// Size should decrease
    assert(numbers1.size() != numbers3.size());		// numbers1 should now have a 
							//   different size than numbers3
//Test assignment operator
    numbers3 = numbers2;
    for(int i=0; i<9 ;i++){		// Loop through and make sure each element matches
        ItemType two;
        numbers2.get(i, two);
        ItemType three;
        numbers3.get(i, three);
        assert(two==three);
    }

    assert(numbers2.size() == numbers3.size());		// Sizes should match
    assert(numbers2.erase("10"));			// Test Erase head of list
    assert(numbers2.size() == 8);			// Size should decrease
    assert(numbers2.erase("90"));			// Test Erase tail of list
    assert(numbers2.size() == 7);			// Size should decrease
    assert(numbers2.size() != numbers3.size());		// numbers 2 should now have a 
							//   different size than numbers3

 
//Test unite() function
    Set unite1;
    ItemType uniteOne[17] = {"2","8","3","9","5","\0"};
    j=0;
    while(uniteOne[j] != "\0"){
        unite1.insert(uniteOne[j]);
        j++;
    }
    Set unite2;
    ItemType uniteTwo[17] = {"6","3","8","5","10","\0"};
    j=0;
    while(uniteTwo[j] != "\0"){
        unite2.insert(uniteTwo[j]);
        j++;
    }
    Set united;
    unite(unite1, unite2, united);	// result is an empty Set
    assert(united.size() == 7);		// Test correct size of result
    assert(united.contains("9"));	// Should contain these values
    assert(united.contains("3"));
    assert(united.contains("5"));
    assert(united.contains("6"));
    assert(united.contains("10"));
    assert(united.contains("2"));
    assert(united.contains("8"));

//Test subtract() function
    subtract(unite1, unite2, united);	// result is not an empty Set	
    assert(united.size() == 2);		// Test correct size of result
    assert(united.contains("2"));	// Should contain these values
    assert(united.contains("9"));


    unite(unite1, unite2, united);	// Run unite() again on non-empty set
    assert(united.size() == 7);		// Should have the same result as before
    assert(united.contains("9"));
    assert(united.contains("3"));
    assert(united.contains("5"));
    assert(united.contains("6"));
    assert(united.contains("10"));
    assert(united.contains("2"));
    assert(united.contains("8"));
    
	     



                   

	
